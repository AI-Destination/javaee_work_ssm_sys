<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
                           http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- 设置扫描组件的包 -->
    <context:component-scan base-package="cn.liuliang">
        <!-- 告知spring不扫描Controller注解的包-->
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 配置数据源, 整合其他框架, 事务等. -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="initialPoolSize" value="${initialPoolSize}"/>
        <property name="minPoolSize" value="${minPoolSize}"/>
        <property name="maxPoolSize" value="${maxPoolSize}"/>
        <property name="acquireIncrement" value="${acquireIncrement}"/>
        <property name="maxStatements" value="${maxStatements}"/>
        <property name="maxStatementsPerConnection" value="${maxStatementsPerConnection}"/>
    </bean>
    <!--2、配置JdbcTemplate操作数据库。pass  -->
    <!--3、配置使用mybatis操作数据库  -->
    <!-- 可以根据配置文件得到sqlSessionFactory -->
    <bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定配置文件位置 -->
        <property name="configLocation" value="classpath:mybatis/mybatisConfing.xml"></property>
        <property name="dataSource" ref="dataSource"></property>
        <!-- 指定xml映射文件的位置 -->
        <property name="mapperLocations" value="classpath:cn/liuliang/dao/*.xml"></property>
    </bean>
    <!-- 我们要把每一个dao接口的实现加入到ioc容器； -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定dao接口所在的包 -->
        <property name="basePackage" value="cn.liuliang.javaeesys.dao"></property>
    </bean>
    <!-- <mybatis-spring:scan base-package="cn.liuliang.Dao"/> -->


    <!--4、配置事务控制;配置事务管理器，让他控制住数据源里面的链接的关闭和提交  -->
    <bean id="tm" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--5、基于xml配置，配置事务；哪些方法切入事务还要写切入点表达式  -->
    <!--配置切入点表达式
    <aop:config>
        <aop:pointcut expression="execution(* cn.liuliang.Service.*.*(..))" id="txPoint"/>
        <aop:advisor advice-ref="myTx" pointcut-ref="txPoint"/>
    </aop:config>
    -->
    <!--6、配置事务增强、事务属性、事务建议
     transaction-manager="tm"：指定要配置的事务管理器的id
    -->
    <tx:advice id="myTx" transaction-manager="tm">
        <!-- 配置事务属性 -->
        <tx:attributes>
            <tx:method name="*" rollback-for="java.lang.Exception"/>
            <tx:method name="get*" read-only="true"/>
            <!-- <tx:method name="insertEmp" isolation="READ_UNCOMMITTED"/> -->
        </tx:attributes>
    </tx:advice>
    <!-- 开启aop注解配置支持 -->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    <!-- 开启事务注解配置支持 -->
    <tx:annotation-driven transaction-manager="tm"></tx:annotation-driven>
</beans>